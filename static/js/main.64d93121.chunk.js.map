{"version":3,"sources":["components/Error.jsx","components/Formulario.jsx","components/Imagen.jsx","components/ListadoImagenes.jsx","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","guardarBusqueda","useState","termino","guardarTermino","error","guardarError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagenes","imagenes","map","key","id","App","busqueda","guardarImagenes","paginaactual","guardarPaginaActual","totalpaginas","guardarTotalPaginas","useEffect","a","imagenesPorPagina","url","fetch","respuesta","json","resultado","hits","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultarApi","onClick","nuevaPaginaActual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.64d93121.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Error = ({ mensaje }) => {\r\n  return <p className='my-3 p-4 text-center aler alert-primary'>{mensaje}</p>;\r\n};\r\n\r\nexport default Error;\r\n","import React, { useState } from \"react\";\r\nimport Error from \"./Error\";\r\n\r\nconst Formulario = ({ guardarBusqueda }) => {\r\n  const [termino, guardarTermino] = useState(\"\");\r\n  const [error, guardarError] = useState(false);\r\n\r\n  const buscarImagenes = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validar\r\n    if (termino.trim() === \"\") {\r\n      guardarError(true);\r\n      return;\r\n    }\r\n    guardarError(false);\r\n    // Enviar el termino de busqueda hacia el componente principal\r\n    guardarBusqueda(termino);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={buscarImagenes}>\r\n      <div className='row'>\r\n        <div className='form-group col-md-8'>\r\n          <input\r\n            type='text'\r\n            className='form-control form-control-lg'\r\n            placeholder='Busca una imagen, Ejemplo: Futbol o café'\r\n            onChange={(e) => guardarTermino(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className='form-group col-md-4'>\r\n          <input type='submit' className='btn btn-lg btn-danger btn-block' value='Buscar' />\r\n        </div>\r\n      </div>\r\n      {error ? <Error mensaje='Agrega un término de búsqueda' /> : null}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React from \"react\";\r\n\r\nconst Imagen = ({ imagen }) => {\r\n  // Extraer las variables\r\n  const { largeImageURL, likes, previewURL, tags, views } = imagen;\r\n  return (\r\n    <div className='col-12 col-sm-6 col-md-4 col-lg-3 mb-4'>\r\n      <div className='card'>\r\n        <img src={previewURL} alt={tags} className='card-img-top' />\r\n      </div>\r\n      <div className='card-body'>\r\n        <p className='card-text'>{likes} Me Gusta</p>\r\n        <p className='card-text'>{views} Vistas</p>\r\n      </div>\r\n      <div className='card-footer'>\r\n        <a href={largeImageURL} target='_blank' rel='noopener noreferrer' className='btn btn-primary btn-block'>\r\n          Ver Imagen\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Imagen;\r\n","import React from \"react\";\r\nimport Imagen from \"./Imagen\";\r\n\r\nconst ListadoImagenes = ({ imagenes }) => {\r\n  return (\r\n    <div className='col-12 p-5 row'>\r\n      {imagenes.map((imagen) => (\r\n        <Imagen key={imagen.id} imagen={imagen} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListadoImagenes;\r\n","import React, { useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport ListadoImagenes from \"./components/ListadoImagenes\";\n\nfunction App() {\n  // State de la APP\n  const [busqueda, guardarBusqueda] = useState(\"\");\n  const [imagenes, guardarImagenes] = useState([]);\n  const [paginaactual, guardarPaginaActual] = useState(1);\n  const [totalpaginas, guardarTotalPaginas] = useState(1);\n\n  useEffect(() => {\n    const consultarApi = async () => {\n      if (busqueda === \"\") return;\n\n      const imagenesPorPagina = 30;\n      const key = \"18030279-448b235008438d88fef4ddf4c\";\n      const url = `https://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenesPorPagina}&page=${paginaactual}`;\n\n      const respuesta = await fetch(url);\n      const resultado = await respuesta.json();\n\n      guardarImagenes(resultado.hits);\n\n      // calcular total de paginas\n      const calcularTotalPaginas = Math.ceil(resultado.totalHits / imagenesPorPagina);\n      guardarTotalPaginas(calcularTotalPaginas);\n\n      // Mover la pantalla hacia arriba\n      const jumbotron = document.querySelector(\".jumbotron\");\n      jumbotron.scrollIntoView({ behavior: \"smooth\" });\n    };\n    consultarApi();\n  }, [busqueda, paginaactual]);\n\n  // Definir la pagina anterior\n  const paginaAnterior = () => {\n    const nuevaPaginaActual = paginaactual - 1;\n    if (nuevaPaginaActual === 0) return;\n    guardarPaginaActual(nuevaPaginaActual);\n  };\n\n  // Definir la pagina siguiente\n  const paginaSiguiente = () => {\n    const nuevaPaginaActual = paginaactual + 1;\n    if (nuevaPaginaActual > totalpaginas) return;\n    guardarPaginaActual(nuevaPaginaActual);\n  };\n\n  return (\n    <div className='container'>\n      <div className='jumbotron'>\n        <p className='lead text-center'>Buscador de imágenes</p>\n\n        <Formulario guardarBusqueda={guardarBusqueda} />\n      </div>\n      <div className='row justify-content-center'>\n        <ListadoImagenes imagenes={imagenes} />\n        {paginaactual === 1 ? null : (\n          <button type='button' className='btn btn-info -mr-1' onClick={paginaAnterior}>\n            &laquo; Anterior\n          </button>\n        )}\n        {paginaactual === totalpaginas ? null : (\n          <button type='button' className='btn btn-info' onClick={paginaSiguiente}>\n            Siguiente &raquo;\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}